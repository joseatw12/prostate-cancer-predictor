# -*- coding: utf-8 -*-
"""prostate_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eLEuOd33NgQky7lR6CivpinL_GSsu0Ch
"""

import streamlit as st
import pandas as pd
import joblib
import requests

# Load model and encoders
model = joblib.load("prostate_cancer_model.pkl")
label_encoders = joblib.load("label_encoders.pkl")

# Hugging Face API token
HUGGINGFACE_TOKEN = "hf_your_token_here"  # üîÅ Replace this with your actual token

st.title("üß† Prostate Cancer Predictor")
st.write("Enter the patient's clinical measurements below:")

# User input sliders
radius = st.slider("Radius", 5, 30, 15)
texture = st.slider("Texture", 5, 30, 18)
perimeter = st.slider("Perimeter", 50, 200, 105)
area = st.slider("Area", 100, 2000, 700)
smoothness = st.slider("Smoothness", 0.05, 0.2, 0.11)
compactness = st.slider("Compactness", 0.01, 0.5, 0.17)
symmetry = st.slider("Symmetry", 0.05, 0.4, 0.23)
fractal_dimension = st.slider("Fractal Dimension", 0.04, 0.1, 0.06)

if st.button("üîç Predict and Explain"):
    # Step 1: Build input data
    new_patient = {
        "radius": radius,
        "texture": texture,
        "perimeter": perimeter,
        "area": area,
        "smoothness": smoothness,
        "compactness": compactness,
        "symmetry": symmetry,
        "fractal_dimension": fractal_dimension
    }
    input_df = pd.DataFrame([new_patient])

    # Step 2: Predict using your trained model
    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1] * 100
    label = label_encoders["diagnosis_result"].inverse_transform([prediction])[0]

    st.subheader(f"Prediction: {label} ({probability:.1f}% chance of cancer)")

    # Step 3: Create a natural language prompt
    prompt = f"""
    A patient presents with the following clinical indicators:
    - Radius: {radius}
    - Texture: {texture}
    - Perimeter: {perimeter}
    - Area: {area}
    - Smoothness: {smoothness}
    - Compactness: {compactness}
    - Symmetry: {symmetry}
    - Fractal Dimension: {fractal_dimension}

    Based on a trained model, the probability of this patient having prostate cancer is {probability:.1f}%.

    Please explain this result in simple terms for a medical student or concerned patient.
    """

    # Step 4: Ask Hugging Face model to explain
    with st.spinner("üß† Asking AI to explain the result..."):
        response = requests.post(
            "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.1",
            headers={"Authorization": f"Bearer {HUGGINGFACE_TOKEN}"},
            json={"inputs": prompt}
        )
        result = response.json()
        explanation = result[0]["generated_text"] if isinstance(result, list) else result.get("error", "Error")

    st.markdown("### AI Explanation")
    st.write(explanation)